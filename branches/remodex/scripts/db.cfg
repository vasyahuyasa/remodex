// Database functions for Remod
// Informal rule: all "local" variables should be started with "db__"
// How to use database?
//

/////////////////////////////////////
// Register database in remod
// @group db
// @arg1 database engine, "mysql" or "sqlite3"
// @arg2 connection string  (login:password@server:port/database_name  for mysql or path/to/file.db for sqlite)
// @arg3 name of database in remod ("default" for default database)
// @example db_register "sqlite" "base.db" "default"
db_register = [
	if (|| (&& (=s $arg1 "sqlite3") (identexists "sqlite3_open")) (&& (=s $arg1 "mysql") (identexists "mysql_open"))) [
		//checking available of egine specific functions.
		db__name = (getvalue "arg3" "default")
		alias (concatword "db__engine_" $db__name) $arg1
		alias (concatword "db__str_" $db__name) $arg2
		alias (concatword "db__dbuid_" $db__name) "-1"
		
		log_info (format "Registered database '%1' %2://%3" $db__name $arg1 $arg2)
	] [
		log_error (format "Database engine '%1' was not compiled in server" $arg1)
	]
]

/////////////////////////////////////
// Get engine of registered database
// @group db
// @arg1 name of database (default value: "default")
// @return engine of registered database (currently: "mysql" or "sqlite")
// @example $engine = (db_get_engine "default")
db_get_engine = [
	result (getalias (concatword "db__engine_" (getvalue "arg1" "default")))
]

////////////////////////////////////
// Get connection string of registered database
// @group db
// @arg1 name of database (default value: "default")
// @return connection string
// @example $conn_str = (db_get_connstr "default")
db_get_connstr = [
	result (getalias (concatword "db__str_" (getvalue "arg1" "default")))
]


/////////////////////////////////////
// Get dbuid for specified database 
// @group db
// @arg1 database name (default value: "default")
// @return dbuid (internal remod's id of database connection)
// @example $dbuid = (db_get_dbuid "default")
db_get_dbuid = [
	result (getalias (concatword "db__dbuid_" (getvalue "arg1" "default")))
]

/////////////////////////////////////
// Check if database connection (dbuid) is valid. 
// If no, prints error message.
// @group db
// @arg1 database name (default value: "default")
// @return 1 if connection is valid otherwise 0
// @example if (db_check_dbuid "default") [... do some code...]
db_check_dbuid = [
	db__name = (getvalue "arg1" "default")
	db__uid = (getalias (concatword "db__dbuid_" $db__name))
	if (= $db__uid -1) [
		db_print_error $db__name "could not initialize connection"
		db__res = 0
	] [
		db__res = 1
	]
	result $db__res
]

/////////////////////////////////////
// Set database connection id (dbuid)
// @group db
// @arg1 dbuid
// @arg2 database name (default value: "default")
// @example db_set_dbuid $dbuid "default"
db_set_dbuid = [
	alias (concatword "db__dbuid_" (getvalue "arg2" "default")) $arg1
]

/////////////////////////////////////
// Format and log error message for database
// @group db
// @arg1 message
// @arg2 database name (default value: "default")
// @example db_print_error "database was stolen by Cthulhu" "default"
db_print_error = [
	db__name = (getvalue "arg2" "default")
	log_error (format "%2 database '%1': %3" $db__name (db_get_engine $db__name) $arg1)
]

/////////////////////////////////////
// Get database error message and print it with db_print_error
// @group db
// @arg1 database name (default value: "default")
// @example db_error "default"
db_error = [
	db__name = (getvalue "arg1" "default")
	db__uid = (db_get_dbuid $db__name)
	
	cases (db_get_engine $db__name) "sqlite3" [
		db_print_error (sqlite3_error $db__uid) $db__name
	] "mysql" [
		db_print_error (mysql_error $db__uid) $db__name
	] () [
		db_print_error "Unsupported database engine" $db__name
	]
]

/////////////////////////////////////
// Open connection for database
// @group db
// @arg1 database name (default value: "default")
// @return database connection id (dbuid)
// @example db_open "default"
db_open = [
	db__name = (getvalue "arg1" "default")
	db__connection_str = (db_get_connstr $db__name)
	
	cases (db_get_engine $db__name) "sqlite3" [
		db__uid = (sqlite3_open $db__connection_str)
	] "mysql" [ 
		db__uid = (mysql_open $db__connection_str)
	] () [
		db__uid = -1
		log_error (format "Unknown database engine '%1'" $db__name)
	]
	result $db__uid
]


/////////////////////////////////////
// Initialize database connection. Open connection if it has not been opened yet  
// @group db
// @arg1 database name (default value: "default")
// @return database connection id (dbuid)
// @example db_open "default"
db_init = [
	db__name = (getvalue "arg1" "default")
	db__connection_str = (db_get_connstr $db__name)
	db__uid = (db_get_dbuid $db__name)
	if (= $db__uid -1) [
		cases (db_get_engine $db__name) "sqlite3" [
			db_set_dbuid (sqlite3_open $db__connection_str) $db__name
		] "mysql" [ 
			db_set_dbuid (mysql_open $db__connection_str) $db__name
		] () [ 
			log_error (format "Unknown db engine '%1'" $db__name)
		]
		if (db_check_dbuid $arg1 $arg2) [
			log_info (format "Connected to database '%1' %2://%3" $db__name (db_get_engine $db__name) $db__connection_str)
		]
	]
]

/////////////////////////////////////
// Execute raw SQL query
// @group db
// @arg1 SQL query string
// @arg2 database name (default value: "default")
// @return query result id or -1 if error happens
// @example db_query "select * from table where id=1 and name='123'" "default"
db_query = [
	db__name = (getvalue "arg2" "default")
	db__uid = (db_get_dbuid $db__name)
	cases (db_get_engine $db__name) "sqlite3" [
		db__res = (sqlite3_query $db__uid $arg1)
	] "mysql" [
		db__res = (mysql_query $db__uid $arg1)
	] () [
		db__res = -1
	]
	if (= -1 $db__res) [
		db_error $db__name
	]
	result $db__res
]

/////////////////////////////////////
// Get next row from query result list 
// @group db
// @arg1 query result id
// @arg2 database name (default value: "default")
// @return list of vbalues in the row
// @example db_getrow $query_result_id "default" 
db_getrow = [
	db__name = (getvalue "arg2" "default")
	cases (db_get_engine $db__name) "sqlite3" [
		db__res = (sqlite3_getrow $arg1)
	] "mysql" [
		db__res = (mysql_getrow $arg1)
	] () [
		db__res = ""
	]
	result $db__res
]

/////////////////////////////////////
// Finalize query result, free its memory.
// Use it after query result is processed
// @group db
// @arg1 query result id
// @arg2 database name (default value: "default")
// @return 
// @example db_finalize $query_dbuid "default" 
db_finalize = [
	db__name = (getvalue "arg2" "default")
	cases (db_get_engine $db__name) "sqlite3" [
		db__res = (sqlite3_finalize $arg1)
	] "mysql" [		
		db__res = (mysql_finalize $arg1)
	] () [
		db__res = -1
	]
	result $db__res
]

/////////////////////////////////////
// Close database connection
// @group db
// @arg1 database name (default value: "default")
// @return 
// @example db_close "default"
db_close = [
	db__name = (getvalue "arg1" "default")
	db__uid = (db_get_dbuid $db__name)
	
	cases (db_get_engine $arg1) "sqlite3" [
		db__res = (sqlite3_close $db__uid)
	] "mysql" [
		db__res = (mysql_close $db__uid)
	] () [ 
		db__res = -1
	]
	result $db__res
]


/////////////////////////////////////
// List column names   
// @group db
// @arg1 table name
// @arg2 database name (default value: "default")
// @return list of column names (without sorting, as got from PRAGMA table_info/SHOW COLUMNS query)  or empty string if table doesn't exist 
// @example db_table_column_names "spy" "default"
db_table_column_names = [
	db__name = (getvalue "arg2" "default")
	db__uid = (db_get_dbuid $db__name)
	
	cases (db_get_engine $db__name) "sqlite3" [
		qh = (sqlite3_query $db__uid (concatword "PRAGMA table_info(" $arg1 ")"))
		if (= -1 $qh) [
			db__res = -1
		] [
			db__res = ""
			while [row = (sqlite3_getrow $qh $db__name); result (!=s $row "")] [
				if (=s "" $db__res) [ 
					db__res = (at $row 1)
				] [
					db__res = (concat $db__res (at $row 1))
				]
			]
			sqlite3_finalize $qh
		]
	] "mysql" [
		qh = (mysql_query $db__uid (concatword "SHOW COLUMNS FROM " $arg1))
		if (= -1 $qh) [
			db__res = -1
		] [
			db__res = ""
			while [row = (mysql_getrow $qh $db__name); result (!=s $row "")] [
			
				if (=s "" $db__res) [ 
					db__res = (at $row 0)
				] [
					db__res = (concat $db__res (at $row 0))
				]
			]
			mysql_finalize $qh
		]
	] () [
		db__res = -1
	]

	if (= -1 $db__res) [
		db_error $db__name
	]
	//-1 if error, empty string if table not found, list of columns if table found
	result $db__res 
]

// Whether check DB columns or not, useful for modules. Could be set in server-init.cfg
defaultvalue "db_check_columns" 1

/////////////////////////////////////
// Checks if column names in the table match to the given ones    
// @group db
// @arg1 table name 
// @arg2 expected column names (without sorting, as got from PRAGMA table_info/SHOW COLUMNS query) 
// @arg3 database name (default value: "default")
// @return 1 if check passes, otherwise returns 0 and prints error message
// @example db_check_table_columns "spy" "ip name lastseen" "default"
db_check_table_columns = [
	db__name = (getvalue "arg3" "default")
	
	if (= 1 $db_check_columns) [
		columns = (db_table_column_names $arg1 $db__name)
		
		if (= -1 $columns) [
			db__res = 0
		] [
			if (&& (!=s "" $columns) (!=s $arg2 $columns)) [
				log_error (format "%2 database '%1': table '%3' was expected to have '%4' columns, but has '%5'. Seems like you have to upgrade your DB schema, check for documentation." $db__name (db_get_engine $db__name) $arg1 $arg2 $columns)
				db__res = 0
			] [
				db__res = 1
			]
		]
	] [
		db__res = 1
	]
	result $db__res
]


/////////////////////////////////////
// Logs warn message if given db is sqlite 
// @group db
// @arg1 module name
// @arg2 database 
// @example not_recommended_with_sqlite "spy" $db_name
not_recommended_with_sqlite = [
	// Check if it's SQLite
	if (=s "sqlite3" (db_get_engine $arg2)) [
		log_warn (format "Module '%1' could be very slow on SQLite database, it's better to use MySQL instead" $arg1)
	]
]

/////////////////////////////////////
// Checks table for specific module: if fable exists, checks if column names in tables matches to given ones, if table doesn't exist, creates new one by given SQLite/MySQL query
// If check fails, halts server
// For queries, using :0 instead of table name is recommended.
// @group db
// @arg1 module name
// @arg2 database 
// @arg3 table
// @arg4 expected columns names
// @arg5 SQLite query to create the table (will be executed in mysql_pquery)
// @arg6 MySQL query to create the table (will be executed in mysql_pquery)
// @example db_check_table "spy" $spy_db $spy_table "ip name lastseen cnt" "CREATE TABLE `:0` (ip INTEGER..." " "CREATE TABLE IF NOT EXISTS `:0` ...." 
db_check_table = [
	module = $arg1
	db_name = $arg2
	db_table = $arg3
	expected_columns = $arg4
	sqlite_create_table = $arg5
	mysql_create_table = $arg6
	
	// Check if DB table exists and has proper columns
	columns = (db_table_column_names $db_table)
	
	if (|| (=s "" $columns) (=s "-1" $columns)) [
		// no table yet, create it
		log_info (format "Module '%1': creating table '%2'..." $module $db_table)
		
		// SCHEMA DEFINITIONS
		// don't forget about string limit (260 chars)
		
		db__uid = (db_get_dbuid $db_name)
		cases (db_get_engine $db_name) "sqlite3" [
			res = (sqlite3_pquery $db__uid $sqlite_create_table $db_table)
		] "mysql" [ 
			res = (mysql_pquery $db__uid $mysql_create_table $db_table)
		] () [
			res = -1
		]
		if (= $res -1) [
			db_error $db_name
			log_error (format "Module '%1': could not create '%2' table, module could not be loaded. Fix errors or disable %1 module!" $module $db_table)
			halt
		]
	] [
		// table exists, checking columns
		if (= 0 (db_check_table_columns $db_table $expected_columns $db_name) ) [
			log_error (format "Module '%1': database error, module could not be loaded. Fix errors or disable %1 module!" $module)
			halt // force server admin to disable this module or to fix issues
		]
	]

]